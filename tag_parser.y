/*
Y File
Implementing parser using lex and yacc to validate <img> and <a> tag of html
*/

%{
#include<stdio.h>
#include<stdlib.h> 
int yyerror();
%}
	
	//tokens generated by lexical analyzer and passed to parser.
%token START_ANGLE_BRACKET NL A_TAG A_ATTRIBUTE SYNTAX_ERROR EQUAL ATTR_VALUE END_TAG1 A_CONTENT A_END_TAG IMG_TAG IMG_ALT IMG_SRC IMG_OTHER_ATTRIBUTE IMG_END_TAG2 IMG_END_TAG3

%%

	//Grammer rules.
	//if stmt is reached msg valid syntax is printed.

stmt : 	S NL { printf("\n Valid syntax ...\n\n");
            exit(0);}
		;


	//start symbol(S) goes to <img> tag or <a> tag.
	// START_ANGLE_BRACKET = "<".
	
S 	: START_ANGLE_BRACKET A_TAG anchor_attrs 
	| START_ANGLE_BRACKET IMG_TAG i img_ending
	;


i: img_comp_attr img_other_attr i
				| img_other_attr img_comp_attr 
					;
img_comp_attr : IMG_SRC | IMG_ALT
				;
				
img_other_attr 	: IMG_OTHER_ATTRIBUTE img_other_attr
				|
				;
	//img can have three type of end tag >, /> or </img>.
img_ending 		: IMG_END_TAG3
				| IMG_END_TAG2
				| END_TAG1
				;


anchor_attrs 	: A_ATTRIBUTE anchor_attrs
				| END_TAG1 anchor_rem A_END_TAG
				;

	//Tags nesting is done here in <a> tag.			
anchor_rem		: content S anchor_rem  
				| content 
				;
content 		: A_CONTENT content 
				| 
				;

%%

void main()
{
   printf("\n Enter the string : ");
   yyparse();
}

int yyerror(char *msg)
{
   printf("\n Invalid syntax : Error : %s\n\n",msg);
   exit(0);
}
